name: GitHub Actions Pipeline
run-name: ${{ github.actor }} started the pipeline üöÄ
on: [push]
jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Install ESLint
        run: npm install eslint --save-dev

      - name: Initialize ESLint config
        run: npm init @eslint/config --yes

  Build-and-Deliver:
    runs-on: ubuntu-latest
    needs: Test
    steps:

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build web app
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t alonsaban/simple-js-project:latest .
  
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push alonsaban/simple-js-project:latest
        
  Deploy:
    runs-on: ubuntu-latest
    needs: Build-and-Deliver
    steps:

      - name: Set up SSH key
        run: echo "$SSH_PRIVATE_KEY" > private_key
    
      - name: Deploy to EC2 - Connect to Instance
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            
        run: |
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i PRIVATE_KEY ubuntu@18.156.135.191 "echo 'Connected to EC2 Instance'"

      - name: Pull Docker image from Docker Hub
        run: docker pull alonsaban/simple-js-project:latest

      - name: Change to the directory containing deploy.yaml
        run: cd /home/ubuntu/github-helm-argo
      
      - name: Deploy Docker image to Kubernetes cluster
        run: kubectl apply -f your-kubernetes-manifest.yaml
        

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."

